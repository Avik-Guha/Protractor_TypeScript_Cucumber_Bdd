"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Attribute = void 0;
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
const withAnswerOf_1 = require("../withAnswerOf");
const abilities_1 = require("../abilities");
// todo: it might be better to swap the order of arguments
//  - Attribute.called('href').of(link) to make it work with ArrayListFilter
class Attribute extends core_1.Question {
    constructor(target, name) {
        super(io_1.formatted `the value of the ${name} attribute of ${target}`);
        this.target = target;
        this.name = name;
    }
    /**
     * @param {Question<ElementFinder> | ElementFinder} target
     * @returns {AttributeBuilder}
     */
    static of(target) {
        return {
            called: (name) => new Attribute(target, name),
        };
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     */
    answeredBy(actor) {
        return actor.answer(this.name)
            .then(name => withAnswerOf_1.withAnswerOf(actor, this.target, (elf) => elf.getAttribute(name).then(value => {
            return value !== null // workaround for bug in Chromium 91 - https://bugs.chromium.org/p/chromium/issues/detail?id=1205107&start=300
                ? value
                : abilities_1.BrowseTheWeb.as(actor).executeFunction(
                /* istanbul ignore next */
                function getAttribute(webElement, attributeName) {
                    // eslint-disable-next-line no-var
                    var value = (webElement[attributeName] || webElement.getAttribute(attributeName));
                    if (value !== null && value !== undefined) {
                        return '' + value;
                    }
                    return value;
                }, elf.getWebElement(), name);
        })));
    }
}
exports.Attribute = Attribute;
//# sourceMappingURL=Attribute.js.map